using DAL.Common;
using DAL.Common.Domain;
using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Common;
using System.Linq;
using System.Reflection;
using System.Text;
using System.Threading.Tasks;
using UltimateFestivalOrganizer.DAL.Common.Attributes;
using UltimateFestivalOrganizer.DAL.Common.Dao;
using UltimateFestivalOrganizer.DAL.Common.Domain;

namespace UltimateFestivalOrganizer.DAL.SqlServer.Dao
{
    public abstract class BaseDao<T> : IBaseDao<T> where T : BaseEntity, new()
    {
        private IDatabase database;      


        public BaseDao(IDatabase db)
        {
            this.database = db;
        }

        private PropertyInfo GetIdPropertyOfElement()
        {
            var idProperties = typeof(T).GetProperties().Where(x => x.GetCustomAttribute(typeof(Id)) != null);
            return idProperties.First();
        }

        private string GetTableNameOfT()
        {
            return ((TableAttribute)typeof(T).GetCustomAttribute(typeof(TableAttribute))).TableName;
        }

        private string GetDefaultSelect()
        {
            string query = "SELECT ";
            bool first = true;
            typeof(T).GetProperties().ToList().All((x) => { query = string.Concat(query, first ? " " : " , ", x.Name); first = false; return true; });
            query = string.Concat(query, " FROM ");
            query = string.Concat(query, " ", this.GetTableNameOfT());
            return query;

        }

        private string GetDefaultDelte()
        {
            string sql = "DELETE FROM ";
            sql = string.Concat(sql, this.GetTableNameOfT(), " WHERE ", GetIdPropertyOfElement().Name, "=? ");
            return sql;
        }

        private string GetDefaultUpdate()
        {
            string sql = "UPDATE ";
            sql = string.Concat(sql, this.GetTableNameOfT(), " SET ");
            bool first = true;
            typeof(T).GetProperties().All((x) => {
                // only if key is not id add 
                if (x.GetCustomAttribute(typeof(Id)) == null)
                {
                    sql = string.Concat(sql, first ? " " : " , ", x.Name,"=? "); first = false;
                }
                return true;
            });
            sql = string.Concat(sql, " WHERE ", GetIdPropertyOfElement().Name, "=? ");
            return sql;
        }

        private string GetDefaultInsert()
        {
            string sql = "INSERT INTO ";
            sql = string.Concat(sql, this.GetTableNameOfT(), " ( ");
            bool first = true;
            typeof(T).GetProperties().All((x) => {
                // only if key is not autogenerated add 
                if (x.GetCustomAttribute(typeof(AutogenerateIdAttribute)) == null)
                {
                    sql = string.Concat(sql, first ? " " : " , ", x.Name); first = false;
                 }
                return true;
            });
            
            first = true;
            sql = string.Concat(sql, " ) VALUES ( ");
            typeof(T).GetProperties().All((x) => {
                // do it like above
                if (x.GetCustomAttribute(typeof(AutogenerateIdAttribute)) == null)
                {
                    sql = string.Concat(sql, first ? " ? " : " , ? "); first = false;
                }
                return true;
            });
            sql = string.Concat(sql, " ) ");
            return sql;
        }
        private void fetchRelationShip(T element, PropertyInfo info,object key)
        {
            object[] obj = new object[1];
            if (info.PropertyType == typeof(Artist))
            {
                obj[0] = DALFactory.getDao<Artist>(this.database).findById(key);
            }else if(info.PropertyType == typeof(Catagory))
            {
                obj[0] = DALFactory.getDao<Catagory>(this.database).findById(key);
            }else if(info.PropertyType == typeof(Country))
            {
                obj[0] = DALFactory.getDao<Country>(this.database).findById(key);
            }else if(info.PropertyType == typeof(Performance))
            {
                obj[0] = DALFactory.getDao<Performance>(this.database).findById(key);
            }else if(info.PropertyType == typeof(User))
            {
                obj[0] = DALFactory.getDao<User>(this.database).findById(key);
            }else if(info.PropertyType == typeof(Venue))
            {
                obj[0] = DALFactory.getDao<Venue>(this.database).findById(key);
            }
            else
            {
                Console.WriteLine("No Possible DAO found");
            }
            if(obj[0] != null)
            {
                info.GetSetMethod().Invoke(element, obj);
            }
           

        }
        private T ConvertSingleResultToObject(IDataReader reader)
        {
            Console.WriteLine("ConvertSingleResultToObject");
            T element = new T();           
            typeof(T).GetProperties().All((x) => {
                int idx = reader.GetOrdinal(x.Name);
                if (reader.IsDBNull(idx))
                {
                    Console.WriteLine("Property is Empty");
                    return true;
                }
                object[] value = new object[1];
                value[0] = reader.GetValue(idx);
                Console.WriteLine("type: " + x.PropertyType);
                if(x.PropertyType.BaseType == typeof(BaseEntity))
                {
                    fetchRelationShip(element,x,reader.GetValue(idx));
                }
                else
                {
                    Console.WriteLine("Add value to "+ x.Name);
                    if(value != null)
                    {
                        x.GetSetMethod().Invoke(element, value);
                    }
                   
                }
                
                return true;
            });
            return element;
            
        }
        private IList<T> ConvertResultToList(IDataReader reader)
        {
            Console.WriteLine("ConvertResultToList");
            IList<T> retVal = new List<T>();
            while (reader.Read())
            {
                Console.WriteLine("iterate over reader");
                retVal.Add(ConvertSingleResultToObject(reader));
            }
            return retVal;
        }

        public IList<T> findAll()
        {
            DbCommand command = database.CreateCommand(this.GetDefaultSelect());
            Console.WriteLine("Excecute Query: " + command);
            using (IDataReader reader = database.ExecuteReader(command))
            {
                return ConvertResultToList(reader);
            }
            //return null;
        }

        public T findById(object id)
        {
            string query = this.GetDefaultSelect();
            query = string.Concat(query, " WHERE ", this.GetIdPropertyOfElement().Name, "= ? " );
            Console.WriteLine("Query: {0}", query);
            return null;

        }

        public bool Insert(T element)
        {
            Console.WriteLine("isAutogenerated = {0} ", this.GetDefaultInsert());
            return false;
        }

        public bool Update(T element)
        {
            Console.WriteLine("Update Query: {0} ", this.GetDefaultUpdate());
            return false;
        }
        public bool Delete(T element)
        {
            Console.WriteLine("Delete Query: {0} ", this.GetDefaultDelte());
            return false;
        }
    }
}
